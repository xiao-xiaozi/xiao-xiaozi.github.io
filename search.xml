<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序在IOS上遇到的日期问题</title>
      <link href="/2024/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9C%A8IOS%E4%B8%8A%E9%81%87%E5%88%B0%E7%9A%84%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9C%A8IOS%E4%B8%8A%E9%81%87%E5%88%B0%E7%9A%84%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>业务场景</strong></p><p>在小程序上执行涉及日期的相关操作时，日期值入参为<code>2020-01-01</code>格式。在模拟器以及安卓真机上均正常，但在IOS真机上出现日期错误问题。</p><p><strong>解决方法</strong></p><p>将日期格式更改为<code>2020/01/01</code>格式，在IOS真机上正常显示。</p><p>可能是由于安卓与IOS底层对日期格式的实现有所不同导致的问题，比较难以排查的是，问题只在真机上才能够复现。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>patch-package修改node_modules中的依赖源文件并固化</title>
      <link href="/2024/03/18/patch-package%E4%BF%AE%E6%94%B9node-modules%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E6%BA%90%E6%96%87%E4%BB%B6%E5%B9%B6%E5%9B%BA%E5%8C%96/"/>
      <url>/2024/03/18/patch-package%E4%BF%AE%E6%94%B9node-modules%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E6%BA%90%E6%96%87%E4%BB%B6%E5%B9%B6%E5%9B%BA%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>业务场景：</p><p>项目使用了<code>pdf-view</code>(一个pdf预览插件，具体名称待核准)，在浏览器里面展示PDF文件，在遇到有签章的文件时，签章无法正常显示。</p><p>修改<code>node_modules</code>并同步到所有项目成员的方法：<a href="https://www.npmjs.com/package/patch-package"><code>patch-package</code></a></p><p>如果项目的包管理器是<code>npm</code>，需要手动下载依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i patch-package</span><br></pre></td></tr></table></figure><p>如果是<code>yarn</code>且版本是v2+，或为<code>pnpm</code>则无需安装任何依赖，包管理器原生支持<code>patch</code>功能。</p><p>需要特别注意的是，<code>yarn</code>的v1版本，除了安装<code>patch-package</code>依赖外，还需额外安装<code>postinstall-postinstall</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add patch-package postinstall-postinstall</span><br></pre></td></tr></table></figure><p><strong>使用方法</strong></p><p>对<code>node_modules</code>文件夹中需要调整的依赖文件进行更改，然后运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm patch-package modify-package-name</span><br></pre></td></tr></table></figure><p>命令执行完后会在项目根目录创建一个<code>patches</code>文件夹，存放变动的内容记录以<code>diff</code>的形式。</p><p>在项目的<code>package.json</code>中的<code>script</code>中加上一行配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;patch-package&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此后项目在执行<code>npm i</code>时，会自动执行<code>patch</code>操作。已经安装过依赖的项目组成员，通过<code>npm i</code>命令加上补丁。新成员在安装依赖时，自动便会打上<code>patch</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue的keepAlive组件热更新失效问题</title>
      <link href="/2024/03/17/vue%E7%9A%84keepAlive%E7%BB%84%E4%BB%B6%E7%83%AD%E6%9B%B4%E6%96%B0%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/17/vue%E7%9A%84keepAlive%E7%BB%84%E4%BB%B6%E7%83%AD%E6%9B%B4%E6%96%B0%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在vue框架中使用<code>keepAlive</code>组件进行页面缓存是很常见的操作，以下是一个管理后台的<code>layout</code>文件，根据<code>keepAlive</code>组件的<code>include</code>属性缓存指定的页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;transition :name=&quot;transitionActive ? &#x27;fade-transverse&#x27; : &#x27;&#x27;&quot;&gt;</span><br><span class="line">    &lt;keep-alive :include=&quot;keepAlive&quot;&gt;</span><br><span class="line">      &lt;router-view :key=&quot;routerViewKey&quot; /&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在开发开启了缓存的页面时，会遇到更改了页面的代码，但热更新失效的问题，只有手动刷新浏览器才能看到更改后的效果。</p><p>从这个<a href="https://github.com/vuejs/vue-loader/issues/1332">ISSUES</a>，可以了解到是因为热重载是<code>keepAlive</code>组件缓存的<code>cid</code>值发生了变化，导致重载失效。</p><p><code>keepAlive</code>组件的<code>render</code>函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> slot = <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span></span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="title function_">getFirstComponentChild</span>(slot)</span><br><span class="line">    <span class="keyword">const</span> componentOptions = vnode &amp;&amp; vnode.<span class="property">componentOptions</span></span><br><span class="line">    <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">      <span class="comment">// check pattern</span></span><br><span class="line">      <span class="keyword">const</span> name = <span class="title function_">_getComponentName</span>(componentOptions)</span><br><span class="line">      <span class="keyword">const</span> &#123; include, exclude &#125; = <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="comment">// not included</span></span><br><span class="line">        (include &amp;&amp; (!name || !<span class="title function_">matches</span>(include, name))) ||</span><br><span class="line">        <span class="comment">// excluded</span></span><br><span class="line">        (exclude &amp;&amp; name &amp;&amp; <span class="title function_">matches</span>(exclude, name))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> vnode</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; cache, keys &#125; = <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">const</span> key =</span><br><span class="line">        vnode.<span class="property">key</span> == <span class="literal">null</span></span><br><span class="line">          ? <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">            <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">            componentOptions.<span class="property">Ctor</span>.<span class="property">cid</span> +</span><br><span class="line">            (componentOptions.<span class="property">tag</span> ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">          : vnode.<span class="property">key</span></span><br><span class="line">      <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">        vnode.<span class="property">componentInstance</span> = cache[key].<span class="property">componentInstance</span></span><br><span class="line">        <span class="comment">// make current key freshest</span></span><br><span class="line">        <span class="title function_">remove</span>(keys, key)</span><br><span class="line">        keys.<span class="title function_">push</span>(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// delay setting the cache until update</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vnodeToCache</span> = vnode</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyToCache</span> = key</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// @ts-expect-error can vnode.data can be undefined</span></span><br><span class="line">      vnode.<span class="property">data</span>.<span class="property">keepAlive</span> = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode || (slot &amp;&amp; slot[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果组件上配置了<code>key</code>属性，缓存数据<code>cache</code>使用的<code>key</code>是组件上的<code>key</code>属性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-router的addRoutes方法遇到超过最大调用堆栈问题</title>
      <link href="/2024/03/15/vue-router%E7%9A%84addRoutes%E6%96%B9%E6%B3%95%E9%81%87%E5%88%B0%E8%B6%85%E8%BF%87%E6%9C%80%E5%A4%A7%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/15/vue-router%E7%9A%84addRoutes%E6%96%B9%E6%B3%95%E9%81%87%E5%88%B0%E8%B6%85%E8%BF%87%E6%9C%80%E5%A4%A7%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<br /><br /><br /><p>在router.beforeEach 中调用router.addRoutes() 死循环问题</p><p>业务场景：</p><ol><li>应用首次打开（reload）时，进行登录不会触发<code>router.addRoutes()</code>死循环</li><li>切换线上&#x2F;线下API地址时，由请求拦截器resetRouter后回到登录页，此时进行登录会出现<code>router.addRoutes()</code>死循环</li></ol><p><code>vue-router</code>源码中的代码片段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">addRoutes (<span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteConfig</span>&gt;) &#123;</span><br><span class="line">  <span class="keyword">if</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">matcher</span>.<span class="title function_">addRoues</span>(routers)</span><br><span class="line">  <span class="comment">// START: 路由对象 &#123; path:&#x27;/&#x27;, query:&#123;&#125;, ... &#125;</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">current</span> !== <span class="variable constant_">START</span>) &#123;</span><br><span class="line">    <span class="comment">// 当前路由不等于START时，重载当前路由</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">transitionTo</span>(<span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">getCurrentLocation</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每调用一次<code>router.addRoutes()</code>方法都会判断当前路由是否等于<code>START（即：&#123;path:&#39;/&#39;, query:&#123;&#125;, ...&#125;）</code>，不等于时会重载当前路由。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isFetchPermissionInfo = store.<span class="property">state</span>...</span><br><span class="line">    <span class="keyword">if</span>(!isFetchPermissionInfo) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetchPermissionInfo</span>() <span class="comment">// 获取权限路由数据，并挂载。此函数会调用router.addRoutes()方法</span></span><br><span class="line">      <span class="comment">// 将是否已获取权限路由信息标记为true</span></span><br><span class="line">      store.<span class="title function_">commit</span>(<span class="string">&#x27;.../isFetchPermissionInfo&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">name</span> === <span class="string">&#x27;login&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(token &amp;&amp; token !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="keyword">from</span>.<span class="property">path</span>, <span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序webview内嵌H5图片保存问题</title>
      <link href="/2024/03/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E5%86%85%E5%B5%8CH5%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E5%86%85%E5%B5%8CH5%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>微信小程序通过<code>webview</code>加载<code>H5</code>项目，在<code>H5</code>项目内保存图片时遇到问题记录。</p><p>项目所使用的技术栈:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">H5项目: uniapp 开发的项目</span><br><span class="line">微信小程序小程序: 第三方小程序，非项目组所能控制</span><br></pre></td></tr></table></figure><p>需求交付时，提到了一个图片展示页面，通过提供一个下载按钮，让用户点击后可以将图片下载到本地。基于项目为微信小程序内嵌H5的方式，第一时间提出了这个保存需要评估能否实现，以及具体实现的方式需要预研下。</p><blockquote><p>如果是真实图片路径，不会遇到后面的问题，只有临时路径才触发了问题。因图片为实时生成，故不存在真实路径，前端是经由下载后拿到临时路径进行展示的。</p></blockquote><p>在<code>uniapp</code>以及微信小程序文档查找，发现几乎所有的保存相关的接口都无法在H5端调用。能用使用上的方法仅有<code>downloadFile</code>接口，拿到文件的临时路径。</p><p>这是自然而然想到了可以通过微信的长按图片进行保存的操作。然而在实际测试中发现，只有在IOS上才可以保存成功，安卓一直提示保存失败。（长按后的操作弹窗有正常弹出，点保存后提示保存失败。）</p><p>自此，这个长按保存的方案也不可行。于是又转了一圈微信社区以及uniapp的问答区，也看见了有相关问题的讨论，但没有纯H5保存的方法。看起来可行（没有亲测过，项目的小程序是第三方的，联调比较困难。）的一个操作是H5与微信小程序通讯，让小程序进行图片保存操作。但这个方案对当前的项目来说比较困难。</p><p>后面因为一些原因，又回到长按保存的实现上，研究安卓上的保存问题。在测试过真实图片地址可以正常访问后，开始推测，会否是临时路径导致的保存失败。于是开始找非临时路径展示的方式。</p><p>最后，通过canvas将图片绘制出来，又转为<code>base64</code>图片后，测试在安卓以及IOS上均可以保存成功。至此问题解决！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/08/hello-world/"/>
      <url>/2024/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>默认以文章的标题作为文件名称，但可以通过编辑<code>new_post_name</code>参数来改变默认的文件名称，举例来说，设为<code>:year-:month-:day-:title.md</code>可以更方便的通过日期来管理文章。可以使用以下占位符。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如，2015</td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如，<code>04</code></td></tr><tr><td><code>i_month</code></td><td>建立的月份（无前导零），比如<code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如<code>07</code></td></tr><tr><td><code>i_day</code></td><td>建立的日期（无前导零），比如<code>7</code></td></tr></tbody></table><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure><h4 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure><p>将草稿文件从<code>_drafts</code>文件夹迁移到<code>_post</code>文件夹。</p><h3 id="模板-Scaffold"><a href="#模板-Scaffold" class="headerlink" title="模板(Scaffold)"></a>模板(Scaffold)</h3><p>在新建文章时，Hexo会根据<code>Scaffolds</code>文件夹内的相应文件来创建文件，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo <span class="string">&quot;My Gallery&quot;</span></span><br></pre></td></tr></table></figure><p>在执行这行命令时，Hexo会尝试在<code>Scaffolds</code>文件夹中寻找<code>photo.md</code><br>，并根据其内容建立文章，以下是可以在模板内使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>layou</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>文件建立日期</td></tr></tbody></table><h3 id="支持的格式"><a href="#支持的格式" class="headerlink" title="支持的格式"></a>支持的格式</h3><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><p>例如，Hexo默认安装了<code>hexo-renderer-marked</code>和<code>hexo-renderer-ejs</code>，因此不仅可以用<code>Markdown</code>写作，还可以用<code>EJS</code>写作。如果安装了<code>hexo-renderer-pug</code>，甚至可以用<code>Pug</code>模板语言写文章。</p><p>只需要将文章的扩展名从<code>md</code>改成<code>ejs</code>，Hexo就会使用<code>hexo-renderer-ejs</code>渲染这个文件，其他格式同理。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以<code>---</code>分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line"><span class="section">date: 2013/7/13 20:46:25</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，可在模板中使用这些参数并加以利用。</p><table><thead><tr><th>参数</th><th align="left">描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td align="left">布局</td><td><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0">config.default_layout</a></td></tr><tr><td><code>title</code></td><td align="left">标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td align="left">建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td align="left">更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td align="left">开启文章的评论功能</td><td><code>true</code></td></tr><tr><td><code>tags</code></td><td align="left">标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td align="left">分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td align="left">覆盖文章的永久链接，永久链接应该以 &#x2F; 或 .html结尾</td><td>null</td></tr><tr><td><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用该<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">插件</a>来格式化文本</td><td></td></tr><tr><td>disableNunjucks</td><td align="left">启用时禁用Nunjucks标签 <code>&#123;&#123;&#125;&#125;</code> &#x2F; <code>&#123;% %&#125;</code>和<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a>的渲染功能</td><td></td></tr><tr><td><code>lang</code></td><td align="left">设置语言以覆盖<a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动监测</a></td><td>继承自<code>_config.yml</code></td></tr><tr><td>published</td><td align="left">文章是否发布</td><td>对于<code>_posts</code>下的文章为<code>true</code>，对于<code>_draft</code>下的文章为<code>false</code></td></tr></tbody></table><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>根据<code>_config.yml</code>中<code>default_layout</code>的设置，默认布局是<code>post</code>。当文章中的布局被禁用（<code>layout: false</code>），它将不会使用主题处理。然而它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用Markdown写的，并且安装了Markdown渲染引擎（比如默认的<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>），它将渲染成HTML。</p><p>除非通过<code>disableNunjucks</code>设置或<a href="https://hexo.io/zh-cn/api/renderer#%E7%A6%81%E7%94%A8-Nunjucks-%E6%A0%87%E7%AD%BE">渲染引擎</a>禁用，否则无论布局如何，<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a>总是被处理。</p><h4 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h4><p>只有文章支持分类和标签，可以在Front-matter中设置。在其它系统中，分类和标签听起来很接近，但是在Hexo中两者有着明显的差异：分类具有顺序性和层次性，也就是说<code>Foo Bar</code>不等于<code>Bar Foo</code>；而标签没有顺序和层次。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> Diary</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> PS3</span><br><span class="line"><span class="bullet">-</span> Games</span><br></pre></td></tr></table></figure><blockquote><p><strong>分类方法的分歧</strong></p><p>如果有使用过WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级别的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> Diary</span><br><span class="line"><span class="bullet">-</span> Life</span><br></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为文章选择尽可能准确的分类。</p><p>如果需要为文章添加多个分类，可以尝试以下<code>list</code>中的方法。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> [Diary, PlayStation]</span><br><span class="line"><span class="bullet">-</span> [ Diary, Games ]</span><br><span class="line"><span class="bullet">-</span> [Life]</span><br></pre></td></tr></table></figure><p>此时这篇文章同时包含三个分类：<code>PlayStation</code>和<code>Games</code>分别都是父分类<code>Diary</code>的子分类，同时<code>Life</code>是一个没有子分类的分类。</p></blockquote><h4 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h4><p>除了YAML外，也可以使用JSON来编写Front-matter，只要将<code>---</code>代换成<code>;;;</code>即可。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;title&quot;: &quot;Hello Word&quot;,</span><br><span class="line">&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><h3 id="标签插件（Tag-Plugin）"><a href="#标签插件（Tag-Plugin）" class="headerlink" title="标签插件（Tag Plugin）"></a>标签插件（Tag Plugin）</h3><p>标签插件和Front-matter中的标签不同，他们是用于在文章中，快速插入特定内容的插件。</p><p>虽然可以使用任何格式书写文章，但是标签插件永远可用，且语法也都是一致的。</p><h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号</strong>： quote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>没有提供参数，则只是输出普通的blockquote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendreit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendreit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p><strong>引用书上的句子</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><p><strong>引用Twitter</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><p><strong>引用网络上的文章</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>在文章中插入代码。</p><p><strong>别名</strong>: code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>以<code>option:value</code>的格式指定额外选项，例如：<code>line_number:false first_line:5</code></p><table><thead><tr><th>额外选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>line_number</code></td><td>显示行号</td><td><code>true</code></td></tr><tr><td><code>line_threshold</code></td><td>只有代码块的行数超过阈值，才显示行数</td><td>0</td></tr><tr><td><code>highlight</code></td><td>启用代码高亮</td><td><code>true</code></td></tr><tr><td><code>first_line</code></td><td>指定第一个行号</td><td>1</td></tr><tr><td><code>mark</code></td><td>突出显示特定的行，每个值用逗号分隔。使用破折号指定数字范围。例如：<code>mark:1,4-7,10</code>将标记第1，4至7和10行</td><td></td></tr><tr><td><code>warp</code></td><td>用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">table</a>包裹代码块</td><td><code>true</code></td></tr></tbody></table><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><strong>普通代码块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure><p><strong>指定语言</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure><p><strong>附加说明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><p><strong>附加说明和网址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h3><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><p>`&#96;&#96; [language] [title] [url] [link text] code snippet &#96;&#96;&#96;</p><h3 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h3><p>在文章中插入Pull Quote。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>content</p></blockquote><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>在文章插入iframe。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>在文章中插入指定大小的图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>在文章中插入链接，并自动给外部链接添加<code>target=&quot;_blank&quot;</code>属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h3><p>插入<code>source/downloads/code</code>文件夹内的代码文件。<code>source/downloads/code</code>不是固定的，取决于在配置文件中<code>code_dir</code>的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><strong>嵌入test.js文件全文</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>只嵌入第三行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第五行到第八行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第五行至文件结束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第一行至第八行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h3><p>引用其它文章的链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。</p><p>例如，在文章中使用<code>&#123;% post_link how-to-back-a-cake %&#125;</code>时，只需有一个名为<code>how-to-back-a-cake.md</code>的文章文件即可。即使这个文件位于站点文件夹的<code>source/posts/2015-02-my-family-holiday</code>目录下、或者文章的永久链接是<code>2018/en/how-to-back-a-cake</code>，都没有影响。</p><p>默认链接文字是文章的标题，也可以自定义要显示的文本。</p><p>默认对文章的标题和自定义标题的特殊字符进行转义。可以使用<code>escape</code>选项，禁止对特殊字符进行转义。</p><p>例如：</p><p><strong>链接使用文章标题</strong></p><p><code>&#123;% post_link hexo-3-8-released %&#125;</code></p><a href="/2024/03/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E5%86%85%E5%B5%8CH5%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E9%97%AE%E9%A2%98/" title="微信小程序webview内嵌H5图片保存问题">微信小程序webview内嵌H5图片保存问题</a><br/><br/><p><strong>链接使用自定义文字</strong></p><a href="/2024/03/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E5%86%85%E5%B5%8CH5%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E9%97%AE%E9%A2%98/" title="微信小程序webview内嵌H5图片保存问题">导航到一篇文章</a><br/><br/><p><strong>对标题的特殊字符进行转义</strong></p><p><code>&#123;% post_link hexo-4-released 'How to use <b> tag in title' %&#125;</code></p><a href="/2024/03/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E5%86%85%E5%B5%8CH5%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E9%97%AE%E9%A2%98/" title="微信小程序webview内嵌H5图片保存问题">How to use &lt;b&gt; tag in title</a><br/><br/><p><strong>禁止对标题的特殊字符进行转义</strong></p><p><code>&#123;% post_link hexo-4-released '<b>bold</b> custom title' false %&#125;</code></p><a href="/2024/03/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwebview%E5%86%85%E5%B5%8CH5%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E9%97%AE%E9%A2%98/" title="微信小程序webview内嵌H5图片保存问题"><b>bold</b> custom title</a><h2 id="使用的主题"><a href="#使用的主题" class="headerlink" title="使用的主题"></a>使用的主题</h2><p><a href="https://www.haomwei.com/technology/maupassant-hexo.html">地址</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
